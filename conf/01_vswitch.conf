# vhost character device file used by dpdkvhostport QemuWrap cases
VHOST_DEV_FILE = 'ovs-vhost-net'

# location of vhost-user sockets relative to 'ovs_var_tmp'
VHOST_USER_SOCKS = 'dpdkvhostuser*'

# Bridge name to be used by VSWTICH
VSWITCH_BRIDGE_NAME = 'virbr0'

WHITELIST_NICS = ['05:00.0', '05:00.1']

LOG_PATH='/tmp'
RESULTS_PATH='/tmp'

VSWITCH_DIR = os.path.join(ROOT_DIR, 'vswitches')
VSWITCH = "OvsDpdkVhost"
LOG_FILE_VSWITCHD = 'vswitchd.log'
LOG_FILE_OVS = 'ovs.log'
OVS_CMD_TIMEOUT = 10
# p2p, pvp, pvvp, pvpv, op2p, ptunp, clean
DEPLOYMENT='p2p'

# DPDK target used when builing DPDK
RTE_TARGET = 'x86_64-native-linuxapp-gcc'

VSWITCH_JUMBO_FRAMES_ENABLED = False
VSWITCH_JUMBO_FRAMES_SIZE = 9000

# default arguments of OVS ctl tools
OVS_VSCTL_ARGS = []
OVS_OFCTL_ARGS = ['-O', 'OpenFlow13']   # backward compatible default value
OVS_APPCTL_ARGS = []

# default flow template to be used by OVS classes
OVS_FLOW_TEMPLATE = {
    'idle_timeout': '0'
}

# enable or disable configuration of routing tables; See vswitchperf_design.rst
# for details.
OVS_ROUTING_TABLES = False

PATHS['dpdk'] = {
        'type' : 'src',
        'src': {
            'path': os.path.join(ROOT_DIR, 'src/dpdk/dpdk/'),
            # To use vfio set:
            # 'modules' : ['uio', 'vfio-pci'],
            'modules' : ['uio', os.path.join(RTE_TARGET, 'kmod/igb_uio.ko')],
            'bind-tool': '*tools/dpdk*bind.py',
            'testpmd': os.path.join(RTE_TARGET, 'app', 'testpmd'),
        },
        'bin': {
            'bind-tool': '/usr/share/dpdk/tools/dpdk*bind.py',
            'modules' : ['uio', 'igb_uio'],
            'testpmd' : 'testpmd'
        }
    }

PATHS['vswitch'] = {
    'none' : {      # used by SRIOV tests
        'type' : 'src',
        'src' : {},
    },
    'OvsDpdkVhost': {
        'type' : 'src',
        'src': {
            'path': os.path.join(ROOT_DIR, 'src/ovs/ovs/'),
            'ovs-vswitchd': 'vswitchd/ovs-vswitchd',
            'ovsdb-server': 'ovsdb/ovsdb-server',
            'ovsdb-tool': 'ovsdb/ovsdb-tool',
            'ovsschema': 'vswitchd/vswitch.ovsschema',
            'ovs-vsctl': 'utilities/ovs-vsctl',
            'ovs-ofctl': 'utilities/ovs-ofctl',
            'ovs-dpctl': 'utilities/ovs-dpctl',
            'ovs-appctl': 'utilities/ovs-appctl',
        },
        'bin': {
            'ovs-vswitchd': 'ovs-vswitchd',
            'ovsdb-server': 'ovsdb-server',
            'ovsdb-tool': 'ovsdb-tool',
            'ovsschema': '/usr/share/openvswitch/vswitch.ovsschema',
            'ovs-vsctl': 'ovs-vsctl',
            'ovs-ofctl': 'ovs-ofctl',
            'ovs-dpctl': 'ovs-dpctl',
            'ovs-appctl': 'ovs-appctl',
        }
    },
    'ovs_var_tmp': '/usr/local/var/run/openvswitch/',
    'ovs_etc_tmp': '/usr/local/etc/openvswitch/',
    'VppDpdkVhost': {
        'type' : 'src',
        'src': {
            'path': os.path.join(ROOT_DIR, 'src/vpp/vpp/build-root/install-vpp-native/vpp'),
            'vpp': 'bin/vpp',
            'vppctl': 'bin/vppctl',
            'vpp_plugin_path' : 'lib/vpp_plugins',
        },
        'bin': {
            'vpp': 'vpp',
            'vppctl': 'vppctl',
            'vpp_plugin_path' : '/usr/lib/vpp_plugins',
        }
    },
}

# default OvsVanilla configuration is similar to OvsDpdkVhost except 'path' and 'modules'
PATHS['vswitch'].update({'OvsVanilla' : copy.deepcopy(PATHS['vswitch']['OvsDpdkVhost'])})
PATHS['vswitch']['OvsVanilla']['src']['path'] = os.path.join(ROOT_DIR, 'src_vanilla/ovs/ovs/')
PATHS['vswitch']['OvsVanilla']['src']['modules'] = ['datapath/linux/openvswitch.ko']
PATHS['vswitch']['OvsVanilla']['bin']['modules'] = ['openvswitch']

